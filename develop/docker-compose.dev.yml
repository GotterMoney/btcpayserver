version: '3.8'

services:
  # Bitcoin Node (原有配置)
  bitcoind:
    image: btcpayserver/bitcoin:23.0
    container_name: btcpay_bitcoind_regtest
    restart: unless-stopped
    environment:
      BITCOIN_NETWORK: regtest
      BITCOIN_EXTRA_ARGS: |
        rpcuser=btcpay
        rpcpassword=btcpay123
        rpcbind=0.0.0.0:18443
        rpcallowip=0.0.0.0/0
        port=18444
        zmqpubrawblock=tcp://0.0.0.0:28332
        zmqpubrawtx=tcp://0.0.0.0:28333
        server=1
        listen=1
        listenonion=0
        fallbackfee=0.0002
        txindex=1
    ports:
      - "18443:18443"  # Bitcoin RPC
      - "18444:18444"  # Bitcoin P2P
      - "28332:28332"  # ZMQ block
      - "28333:28333"  # ZMQ tx
    volumes:
      - bitcoin_regtest_data:/data

  # TRON Node for TRC20 USDT
  tron-node:
    image: tronprotocol/java-tron:GreatVoyage-v4.7.4
    container_name: btcpay_tron_node
    restart: unless-stopped
    environment:
      - JAVA_OPTS=-Xmx2g -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:+G1UseAdaptiveIHOP -XX:+G1UseStringDeduplication
    ports:
      - "8090:8090"   # HTTP API
      - "8091:8091"   # gRPC API  
      - "18888:18888" # P2P
      - "50051:50051" # gRPC
    volumes:
      - tron_data:/java-tron/output-directory
      - ./config/tron:/java-tron/config
    command: >
      bash -c "
        mkdir -p /java-tron/config &&
        cat > /java-tron/config/config.conf << 'EOF'
        net {
          type = mainnet
        }
        
        storage {
          db.version = 2,
          db.engine = \"LEVELDB\",
          db.directory = \"database\",
          index.directory = \"index\",
          transHistory.switch = \"on\"
        }
        
        node.discovery = {
          enable = true
          persist = true
          external.ip = null
        }
        
        node {
          trust.node = \"127.0.0.1:50051\"
          walletExtensionApi = true
          listen.port = 18888
          connection.timeout = 2
          tcpNettyWorkThreadNum = 0
          udpNettyWorkThreadNum = 1
          rpc {
            port = 50051
            maxConnectionIdleInMillis = 60000
            maxConnectionAgeInMillis = 60000
            maxInboundMessageSize = 4194304
            maxHeaderListSize = 8192
          }
          http {
            fullNodePort = 8090
            solidityPort = 8091
          }
        }
        
        seed.node = {
          ip.list = [
            \"54.236.37.243:18888\",
            \"52.53.189.99:18888\",
            \"18.196.99.16:18888\",
            \"34.253.187.192:18888\",
            \"52.56.56.149:18888\",
            \"35.180.51.163:18888\",
            \"54.252.224.209:18888\",
            \"18.228.15.36:18888\",
            \"52.15.93.92:18888\",
            \"34.220.77.106:18888\"
          ]
        }
        
        genesis.block = {
          timestamp = \"0\"
          parentHash = \"0xe58f33f9baf9305dc6f82b9f1934ea8f0ade2defb951258d50167028c780351f\"
        }
        
        block = {
          needSyncCheck = true
          maintenanceTimeInterval = 21600000
        }
        
        vm = {
          supportConstant = true
          minTimeRatio = 0.0
          maxTimeRatio = 5.0
          saveInternalTx = true
        }
        EOF
        java -jar FullNode.jar -c /java-tron/config/config.conf
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/wallet/getnowblock"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ethereum Node for ERC20 USDT
  geth:
    image: ethereum/client-go:v1.13.5
    container_name: btcpay_geth_mainnet
    restart: unless-stopped
    command: >
      --mainnet
      --http
      --http.addr=0.0.0.0
      --http.port=8545
      --http.api=eth,net,web3,personal,txpool,debug
      --http.corsdomain=*
      --http.vhosts=*
      --ws
      --ws.addr=0.0.0.0
      --ws.port=8546
      --ws.api=eth,net,web3,personal,txpool
      --ws.origins=*
      --syncmode=snap
      --cache=1024
      --maxpeers=50
      --nat=extip:0.0.0.0
      --verbosity=3
      --datadir=/root/.ethereum
    ports:
      - "8545:8545"   # HTTP RPC
      - "8546:8546"   # WebSocket RPC
      - "30303:30303" # P2P TCP
      - "30303:30303/udp" # P2P UDP
    volumes:
      - geth_mainnet_data:/root/.ethereum
    environment:
      - GETH_CACHE=1024
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NBXplorer - 支持多链
  nbxplorer:
    image: nicolasdorier/nbxplorer:2.5.4
    container_name: btcpay_nbxplorer_regtest
    restart: unless-stopped
    depends_on:
      - bitcoind
      - postgres
      - geth
    environment:
      NBXPLORER_NETWORK: regtest
      NBXPLORER_BIND: 0.0.0.0:32838
      NBXPLORER_CHAINS: btc,eth,btc,ltc,lbtc,usdt
      # Bitcoin 配置
      NBXPLORER_BTCRPCUSER: btcpay
      NBXPLORER_BTCRPCPASSWORD: btcpay123
      NBXPLORER_BTCRPCURL: http://bitcoind:18443/
      NBXPLORER_BTCNODEENDPOINT: bitcoind:18444
      # Ethereum 配置
      NBXPLORER_ETHRPCURL: http://geth:8545/
      NBXPLORER_ETHNODEFALLBACK: 1
      # 数据库配置
      NBXPLORER_POSTGRES: User ID=postgres;Host=postgres;Port=5432;Database=nbxplorer;Password=postgres
      NBXPLORER_NOAUTH: 1
      # 调试和日志
      NBXPLORER_VERBOSE: 1
      # 性能优化
      NBXPLORER_MINGAPCONFIRMATIONS: 2
      NBXPLORER_MAXGAPCONFIRMATIONS: 21
    ports:
      - "32838:32838"
    volumes:
      - nbxplorer_regtest_data:/datadir
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:32838/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 数据库
  postgres:
    image: postgres:13-alpine
    container_name: btcpay_postgres_regtest
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: btcpayserver
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "39372:5432"
    volumes:
      - postgres_regtest_data:/var/lib/postgresql/data
      - ./config/postgres:/docker-entrypoint-initdb.d
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (可选 - 用于缓存和会话管理)
  redis:
    image: redis:7-alpine
    container_name: btcpay_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass btcpay123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "btcpay123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TronBox 开发工具 (可选 - 用于智能合约开发和测试)
  tronbox:
    image: tronprotocol/tronbox:latest
    container_name: btcpay_tronbox
    restart: "no"
    volumes:
      - ./contracts:/app
      - tronbox_data:/root
    working_dir: /app
    depends_on:
      - tron-node
    profiles:
      - development
    command: tail -f /dev/null

  # TRON Grid API 代理 (可选 - 作为备用RPC端点)
  tron-grid-proxy:
    image: nginx:alpine
    container_name: btcpay_tron_grid_proxy
    restart: unless-stopped
    ports:
      - "8092:80"
    volumes:
      - ./config/nginx/tron-grid.conf:/etc/nginx/conf.d/default.conf
    profiles:
      - production
    command: >
      sh -c "
        cat > /etc/nginx/conf.d/default.conf << 'EOF'
        server {
            listen 80;
            server_name localhost;
            
            location / {
                proxy_pass https://api.trongrid.io;
                proxy_set_header Host api.trongrid.io;
                proxy_set_header X-Real-IP \$$remote_addr;
                proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                proxy_ssl_server_name on;
                proxy_buffering off;
            }
        }
        EOF
        nginx -g 'daemon off;'
      "

volumes:
  # Bitcoin 数据
  bitcoin_regtest_data:
    driver: local
  
  # NBXplorer 数据
  nbxplorer_regtest_data:
    driver: local
  
  # PostgreSQL 数据
  postgres_regtest_data:
    driver: local
  
  # TRON 数据
  tron_data:
    driver: local
  
  # Ethereum 数据
  geth_mainnet_data:
    driver: local
  
  # Redis 数据
  redis_data:
    driver: local
  
  # TronBox 数据
  tronbox_data:
    driver: local

# 网络配置
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 开发和生产环境配置文件
# 已移除不被支持的顶层 profiles 配置